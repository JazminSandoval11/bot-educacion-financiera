# =========================================
# Bot de WhatsApp: Educaci√≥n Financiera para el Mundo
# Autora: Dra. Jazm√≠n Sandoval
# Descripci√≥n: Bot educativo para temas de cr√©dito
# =========================================

from flask import Flask, request
import json
from decimal import Decimal, getcontext
from math import log
import re  # Para eliminar caracteres invisibles

app = Flask(__name__)
getcontext().prec = 17  # Precisi√≥n tipo Excel

estado_usuario = {}

# =========================================
# Funci√≥n auxiliar para parsear a entero
# manejando comas, decimales, caracteres invisibles
# =========================================
def parsear_a_entero(texto: str) -> int:
    """
    Elimina espacios raros, caracteres invisibles,
    reemplaza comas por puntos, y convierte a int.
    """
    # Imprime para debugging
    print(f"DEBUG-> parsear_a_entero recibi√≥: {repr(texto)}")

    # Eliminar caracteres invisibles (zero-width, etc.)
    texto_limpio = re.sub(r"[\u200B-\u200D\uFEFF]", "", texto)

    # Quitar espacios al inicio/fin
    texto_limpio = texto_limpio.strip()

    # Reemplazar comas por punto (si alguien pone 24,0)
    texto_limpio = texto_limpio.replace(",", ".")

    # Convertir primero a float, luego a int
    return int(float(texto_limpio))

# =========================================
# C√°lculo de pago fijo (tipo Excel)
# =========================================
def calcular_pago_fijo_excel(monto, tasa, plazo):
    P = Decimal(str(monto))
    r = Decimal(str(tasa))
    n = Decimal(str(plazo))
    uno_mas_r = Decimal('1') + r
    base_elevada = uno_mas_r ** n
    inverso = Decimal('1') / base_elevada
    denominador = Decimal('1') - inverso
    numerador = P * r
    pago = numerador / denominador
    return pago.quantize(Decimal('0.01'))

# =========================================
# C√°lculo del ahorro con abonos extra
# =========================================
def calcular_ahorro_por_abonos(monto, tasa, plazo, abono_extra, desde_periodo):
    P = Decimal(str(monto))
    r = Decimal(str(tasa))
    n = int(plazo)
    abono = Decimal(str(abono_extra))
    desde = int(desde_periodo)

    pago_fijo = calcular_pago_fijo_excel(P, r, n)
    saldo = P
    periodo = 1
    intereses_totales = Decimal('0.00')
    pagos_realizados = 0
    ultimo_pago = Decimal('0.00')
    total_con_abonos = Decimal('0.00')

    while saldo > 0:
        interes = saldo * r
        abono_a_capital = pago_fijo - interes

        if periodo >= desde:
            abono_a_capital += abono
            total_pago_periodo = pago_fijo + abono
        else:
            total_pago_periodo = pago_fijo

        if abono_a_capital >= saldo:
            interes_final = saldo * r
            ultimo_pago = saldo + interes_final
            intereses_totales += interes_final
            total_con_abonos += ultimo_pago
            pagos_realizados += 1
            break

        saldo -= abono_a_capital
        intereses_totales += interes
        total_con_abonos += total_pago_periodo
        pagos_realizados += 1
        periodo += 1

    total_sin_abonos = pago_fijo * n
    ahorro_total = total_sin_abonos - total_con_abonos
    pagos_ahorrados = n - pagos_realizados

    return (
        total_sin_abonos.quantize(Decimal("0.01")),
        total_con_abonos.quantize(Decimal("0.01")),
        ahorro_total.quantize(Decimal("0.01")),
        pagos_ahorrados
    )

# =========================================
# Costo real de compras a pagos fijos
# (Recibe "periodos_anuales" para la tasa anual)
# =========================================
def calcular_costo_credito_tienda(precio_contado, pago_periodico, num_pagos, periodos_anuales):
    """
    Calcula el costo real de una compra a cr√©dito con pagos fijos.

    Args:
        precio_contado (float): Precio de contado del producto.
        pago_periodico (float): Monto del pago peri√≥dico (por semana, quincena, mes, etc.).
        num_pagos (int): N√∫mero total de pagos.
        periodos_anuales (int): Cu√°ntos periodos hay en un a√±o (12 si es mensual, 24 si es quincenal, etc.).

    Returns:
        tuple: (total_pagado, intereses, tasa_por_periodo_en_%, tasa_anual_equivalente_en_%)
    """
    precio = Decimal(str(precio_contado))
    cuota = Decimal(str(pago_periodico))
    n = int(num_pagos)

    if precio <= 0 or cuota <= 0 or n <= 0 or periodos_anuales <= 0:
        raise ValueError("Todos los valores deben ser mayores a cero")

    saldo = precio
    r_estimada = Decimal('0.05')
    for _ in range(100):
        try:
            base = (Decimal('1') + r_estimada) ** (-n)
            pago_calculado = precio * r_estimada / (1 - base)
            diferencia = pago_calculado - cuota
            if abs(diferencia) < Decimal('0.0001'):
                break
            r_estimada -= diferencia / 1000
        except:
            break

    tasa_periodo = r_estimada
    total_pagado = cuota * n
    intereses = total_pagado - precio

    tasa_anual = ((Decimal('1') + tasa_periodo) ** Decimal(periodos_anuales)) - Decimal('1')

    return (
        total_pagado.quantize(Decimal("0.01")),
        intereses.quantize(Decimal("0.01")),
        (tasa_periodo * 100).quantize(Decimal("0.01")),
        (tasa_anual * 100).quantize(Decimal("0.01"))
    )

# =========================================
# Men√∫ principal
# =========================================
saludo_inicial = (
    "üëã Hola üòä, soy tu asistente virtual de Educaci√≥n Financiera para el Mundo, creado por la Dra. Jazm√≠n Sandoval.\n"
    "Estoy aqu√≠ para ayudarte a comprender mejor c√≥mo funcionan los cr√©ditos y tomar decisiones informadas üí≥üìä\n\n"
    "¬øSobre qu√© aspecto del cr√©dito necesitas ayuda hoy?\n"
    "Escr√≠beme el n√∫mero o el nombre de alguna de estas opciones para empezar:\n\n"
    "1Ô∏è‚É£ Simular un cr√©dito\n"
    "2Ô∏è‚É£ Ver cu√°nto ahorro si doy pagos extras a un cr√©dito\n"
    "3Ô∏è‚É£ Calcular el costo real de compras a pagos fijos en tiendas departamentales\n"
    "4Ô∏è‚É£ ¬øCu√°nto me pueden prestar?\n"
    "5Ô∏è‚É£ Consejos para pagar un cr√©dito sin ahogarte\n"
    "6Ô∏è‚É£ C√≥mo identificar un cr√©dito caro\n"
    "7Ô∏è‚É£ Errores comunes al solicitar un cr√©dito\n"
    "8Ô∏è‚É£ Entender el Bur√≥ de Cr√©dito"
)

app = Flask(__name__)

def enviar_mensaje(numero, texto):
    print(f"[Enviar a {numero}]: {texto}")

def procesar_mensaje(mensaje, numero):
    texto_limpio = mensaje.strip().lower()

    # Diccionario de estados
    global estado_usuario
    if numero not in estado_usuario:
        estado_usuario[numero] = {}

    subflujo_critico = False
    esperando = estado_usuario[numero].get("esperando", None)

    # Checar estados cr√≠ticos
    if esperando in [
        "desde_cuando1", "desde2",
        "abono_extra1", "abono_extra2",
        "riesgo", "subopcion_prestamo",
        "submenu_despues_de_maximo",
        "pedir_periodos_anuales_tienda"
    ]:
        subflujo_critico = True

    # ====================
    # MEN√ö PRINCIPAL
    # ====================
    if not subflujo_critico:
        if texto_limpio in ["hola", "menu", "men√∫"]:
            estado_usuario[numero] = {}
            return saludo_inicial

        if texto_limpio in ["1", "simular un cr√©dito"]:
            estado_usuario[numero] = {"esperando": "monto_credito"}
            return "Perfecto. Para comenzar, dime el monto del cr√©dito que deseas simular."

        if texto_limpio in ["2", "ver cu√°nto me ahorro si doy pagos extra al cr√©dito"]:
            estado_usuario[numero] = {"esperando": "monto2"}
            return "Para estimar tu ahorro con pagos extra, primero dime el Monto del cr√©dito."

        if texto_limpio in ["3", "calcular el costo real de compras a pagos fijos en tiendas departamentales"]:
            estado_usuario[numero] = {"esperando": "precio_contado"}
            return (
                "Vamos a calcular el costo real de una compra a pagos fijos.\n"
                "Por favor dime lo siguiente:\n\n"
                "1Ô∏è‚É£ ¬øCu√°l es el precio de contado del producto?"
            )

        if texto_limpio in ["4", "¬øcu√°nto me pueden prestar?"]:
            estado_usuario[numero] = {"esperando": "ingreso"}
            return (
                "Vamos a calcular cu√°nto podr√≠as solicitar como cr√©dito, seg√∫n tu capacidad de pago.\n\n"
                "Primero necesito saber:\n"
                "1Ô∏è‚É£ ¬øCu√°l es tu ingreso neto mensual? (Despu√©s de impuestos y deducciones)"
            )

        # Opci√≥n 5
        if texto_limpio in ["5", "consejos para pagar un cr√©dito sin ahogarte"]:
            return (
                "üü° Opci√≥n 5: Consejos para pagar un cr√©dito sin ahogarte\n"
                "Pagar un cr√©dito no tiene que sentirse como una carga eterna. Aqu√≠ van algunos consejos sencillos para ayudarte a pagar con m√°s tranquilidad y menos estr√©s:\n"
                "________________________________________\n"
                "‚úÖ 1. Haz pagos anticipados cuando puedas\n"
                "üìå Aunque no sea obligatorio, abonar un poco m√°s al capital te ahorra intereses y reduce el plazo.\n"
                "üí° Incluso $200 o $500 adicionales hacen una gran diferencia con el tiempo.\n"
                "________________________________________\n"
                "‚úÖ 2. Programa tus pagos en autom√°tico\n"
                "üìå Evitas atrasos, recargos y estr√©s.\n"
                "üí° Si no tienes domiciliaci√≥n, pon recordatorios para no fallar.\n"
                "________________________________________\n"
                "‚úÖ 3. Revisa si puedes cambiar tu cr√©dito por uno mejor\n"
                "üìå A esto se le llama ‚Äúreestructura‚Äù o ‚Äúportabilidad‚Äù.\n"
                "üí° Si tu historial ha mejorado, podr√≠as conseguir mejores condiciones.\n"
                "________________________________________\n"
                "‚úÖ 4. Haz un presupuesto mensual\n"
                "üìå Saber cu√°nto entra y cu√°nto sale te ayuda a organizar tus pagos sin descuidar otras necesidades.\n"
                "üí° Ap√≥yate en apps, papel o Excel, lo que te funcione.\n"
                "________________________________________\n"
                "‚úÖ 5. Prioriza las deudas m√°s caras\n"
                "üìå Si tienes varias, enf√≥cate primero en las que tienen inter√©s m√°s alto, como tarjetas de cr√©dito.\n"
                "________________________________________\n"
                "Escribe *men√∫* para volver."
            )

        # Opci√≥n 6
        if texto_limpio in ["6", "c√≥mo identificar un cr√©dito caro"]:
            return (
                "Muchas veces un cr√©dito parece accesible‚Ä¶ hasta que ves lo que terminas pagando. Aqu√≠ te doy algunas claves para detectar si un cr√©dito es caro:\n\n"
                "üîç 1. CAT (Costo Anual Total)\n"
                "Es una medida que incluye la tasa de inter√©s, comisiones y otros cargos.\n"
                "üìå Entre m√°s alto el CAT, m√°s caro te saldr√° el cr√©dito.\n"
                "üí° Compara el CAT entre diferentes instituciones, no solo la tasa.\n\n"
                "üîç 2. Comisiones escondidas\n"
                "Algunos cr√©ditos cobran por apertura, por manejo, por pagos tard√≠os o por pagos anticipados üòµ\n"
                "üìå Lee siempre el contrato antes de firmar.\n\n"
                "üîç 3. Tasa de inter√©s variable\n"
                "üìå Algunos cr√©ditos no tienen tasa fija, sino que pueden subir.\n"
                "üí° Revisa si tu tasa es fija o variable. Las variables pueden volverse muy caras si sube la inflaci√≥n.\n\n"
                "üîç 4. Pago mensual bajo con plazo largo\n"
                "Parece atractivo, pero terminas pagando much√≠simo m√°s en intereses.\n\n"
                "‚ùó Si el cr√©dito parece demasiado f√°cil o r√°pido, pero no entiendes bien cu√°nto vas a pagar en total... ¬°es una se√±al de alerta!\n\n"
                "Escribe *men√∫* para volver."
            )

        # Opci√≥n 7
        if texto_limpio in ["7", "errores comunes al solicitar un cr√©dito"]:
            return (
                "Solicitar un cr√©dito es una gran responsabilidad. Aqu√≠ te comparto algunos errores comunes que muchas personas cometen‚Ä¶ ¬°y c√≥mo evitarlos!\n"
                "________________________________________\n"
                "‚ùå 1. No saber cu√°nto terminar√°s pagando en total\n"
                "Muchas personas solo se fijan en el pago mensual y no en el costo total del cr√©dito.\n"
                "‚úÖ Usa simuladores (como el que tengo üòé) para saber cu√°nto pagar√°s realmente.\n"
                "________________________________________\n"
                "‚ùå 2. Pedir m√°s dinero del que realmente necesitas\n"
                "üìå Entre m√°s pidas, m√°s intereses pagas.\n"
                "‚úÖ Pide solo lo necesario y aseg√∫rate de poder pagarlo.\n"
                "________________________________________\n"
                "‚ùå 3. Aceptar el primer cr√©dito que te ofrecen\n"
                "üìå Hay diferencias enormes entre una instituci√≥n y otra.\n"
                "‚úÖ Compara tasas, comisiones y condiciones antes de decidir.\n"
                "________________________________________\n"
                "‚ùå 4. No leer el contrato completo\n"
                "S√≠, puede ser largo, pero ah√≠ est√°n los detalles importantes:\n"
                "üìå ¬øHay comisiones por pagar antes de tiempo?\n"
                "üìå ¬øQu√© pasa si te atrasas?\n"
                "‚úÖ Lee con calma o pide que te lo expliquen.\n"
                "________________________________________\n"
                "‚ùå 5. Usar un cr√©dito sin un plan de pago\n"
                "üìå Si no sabes c√≥mo lo vas a pagar, puedes meterte en problemas.\n"
                "‚úÖ Haz un presupuesto antes de aceptar cualquier cr√©dito.\n\n"
                "Escribe *men√∫* para volver."
            )

        # Opci√≥n 8
        if texto_limpio in ["8", "entender el bur√≥ de cr√©dito"]:
            estado_usuario[numero] = {"esperando": "submenu_buro"}
            return (
                "El Bur√≥ de Cr√©dito no es un enemigo, es solo un registro de c√≥mo has manejado tus cr√©ditos. Y s√≠, puede ayudarte o perjudicarte seg√∫n tu comportamiento.\n"
                "________________________________________\n"
                "üìä ¬øQu√© es el Bur√≥ de Cr√©dito?\n"
                "Es una empresa que guarda tu historial de pagos.\n"
                "üìå Si pagas bien, tu historial ser√° positivo.\n"
                "üìå Si te atrasas, se reflejar√° ah√≠.\n"
                "________________________________________\n"
                "üí° Tener historial no es malo.\n"
                "De hecho, si nunca has pedido un cr√©dito, no aparecer√°s en Bur√≥ y eso puede dificultar que te aprueben uno.\n"
                "________________________________________\n"
                "üìà Tu comportamiento crea un ‚Äúscore‚Äù o puntaje.\n"
                "‚Ä¢ Pagar a tiempo te ayuda\n"
                "‚Ä¢ Deber mucho o atrasarte te baja el score\n"
                "‚Ä¢ Tener muchas tarjetas al tope tambi√©n afecta\n"
                "________________________________________\n"
                "‚ùó Cuidado con estas ideas falsas:\n"
                "‚Ä¢ ‚ÄúEstoy en Bur√≥‚Äù no siempre es malo\n"
                "‚Ä¢ No es una lista negra\n"
                "‚Ä¢ No te borran tan f√°cil (los registros duran a√±os)\n"
                "________________________________________\n"
                "¬øTe gustar√≠a saber c√≥mo mejorar tu historial crediticio o qu√© pasos tomar para subir tu puntaje?\n"
                "Responde *s√≠* o *no*."
            )

    # ============= L√ìGICA DE ESTADOS =============
    contexto = estado_usuario[numero]

    # FLUJO 2: abonos extra directos
    if contexto.get("esperando") == "monto2":
        try:
            contexto["monto"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "plazo2"
            return "¬øA cu√°ntos pagos (periodos) lo piensas pagar?"
        except:
            return "Por favor, indica el monto del cr√©dito como un n√∫mero."

    if contexto.get("esperando") == "plazo2":
        try:
            contexto["plazo"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "tasa2"
            return "¬øCu√°l es la tasa de inter√©s en el mismo periodo en que har√°s los pagos? (ej. 0.025 para 2.5%)"
        except:
            return "Por favor, indica el plazo como un n√∫mero entero o decimal."

    if contexto.get("esperando") == "tasa2":
        try:
            monto = contexto["monto"]
            plazo = contexto["plazo"]
            tasa = Decimal(mensaje.replace(",", ""))
            pago = calcular_pago_fijo_excel(monto, tasa, plazo)
            total_pagado = pago * plazo
            intereses = total_pagado - monto

            contexto["tasa"] = tasa
            contexto["pago_fijo"] = pago
            contexto["esperando"] = "abono_extra2"
            return (
                f"‚úÖ Tu pago por periodo ser√≠a de: ${pago}\n"
                f"üí∞ Pagar√≠as en total: ${total_pagado.quantize(Decimal('0.01'))}\n"
                f"üìâ De los cuales ${intereses.quantize(Decimal('0.01'))} ser√≠an intereses.\n\n"
                "¬øCu√°nto deseas abonar extra por periodo? (Ejemplo: 500)"
            )
        except:
            return "Por favor escribe la tasa como un n√∫mero decimal (ej. 0.025)."

    if contexto.get("esperando") == "abono_extra2":
        try:
            contexto["abono"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "desde2"
            return "¬øA partir de qu√© periodo comenzar√°s a abonar esa cantidad extra? (Ejemplo: 4)"
        except:
            return "Por favor, escribe solo la cantidad del abono extra (ejemplo: 500)"

    if contexto.get("esperando") == "desde2":
        try:
            desde = int(mensaje.strip())
            total_sin, total_con, ahorro, pagos_menos = calcular_ahorro_por_abonos(
                contexto["monto"], contexto["tasa"],
                contexto["plazo"], contexto["abono"], desde
            )
            estado_usuario.pop(numero)
            return (
                f"üí∏ Si pagaras este cr√©dito sin hacer abonos extra, terminar√≠as pagando ${total_sin} en total.\n\n"
                f"Pero si decides abonar ${contexto['abono']} adicionales por periodo desde el periodo {desde}...\n"
                f"‚úÖ Terminar√≠as de pagar en menos tiempo (¬°te ahorras {pagos_menos} pagos!)\n"
                f"üí∞ Pagar√≠as ${total_con} en total\n"
                f"üßÆ Y te ahorrar√≠as ${ahorro} solo en intereses.\n\n"
                "Escribe *men√∫* para volver al inicio."
            )
        except:
            return "Ocurri√≥ un error al calcular el ahorro. Revisa tus datos."

    # FLUJO 1: Simular cr√©dito
    if contexto.get("esperando") == "monto_credito":
        try:
            contexto["monto"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "plazo_credito"
            return "¬øA cu√°ntos pagos (periodos) lo piensas pagar?"
        except:
            return "Por favor, indica el monto como un n√∫mero (ejemplo: 100000)"

    if contexto.get("esperando") == "plazo_credito":
        try:
            contexto["plazo"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "tasa_credito"
            return (
                "¬øCu√°l es la tasa de inter√©s en el mismo periodo en que har√°s los pagos?\n"
                "Por ejemplo, si pagar√°s cada mes, la tasa debe ser mensual (0.025 para 2.5%)."
            )
        except:
            return "Por favor, indica el plazo como un n√∫mero."

    if contexto.get("esperando") == "tasa_credito":
        try:
            monto = contexto["monto"]
            plazo = contexto["plazo"]
            tasa = Decimal(mensaje.replace(",", ""))
            pago = calcular_pago_fijo_excel(monto, tasa, plazo)
            total_pagado = pago * plazo
            intereses = total_pagado - monto
            contexto["tasa"] = tasa
            contexto["pago_fijo"] = pago
            contexto["esperando"] = "ver_si_abonos1"

            return (
                f"‚úÖ Tu pago por periodo ser√≠a de: ${pago}\n"
                f"üí∞ Pagar√≠as en total: ${total_pagado.quantize(Decimal('0.01'))}\n"
                f"üìâ De los cuales ${intereses.quantize(Decimal('0.01'))} ser√≠an intereses.\n\n"
                "¬øTe gustar√≠a ver cu√°nto podr√≠as ahorrar si haces pagos extra a capital?\n"
                "Responde *s√≠* o *no*."
            )
        except:
            return "Por favor escribe la tasa como un n√∫mero decimal. Ejemplo: 0.025"

    if contexto.get("esperando") == "ver_si_abonos1":
        if texto_limpio == "s√≠":
            contexto["esperando"] = "abono_extra1"
            return "¬øCu√°nto deseas abonar extra por periodo? (Ejemplo: 500)"
        elif texto_limpio == "no":
            estado_usuario.pop(numero)
            return "Ok, regresamos al inicio. Escribe *men√∫* si deseas ver otras opciones."
        else:
            return "Por favor, responde *s√≠* o *no*."

    if contexto.get("esperando") == "abono_extra1":
        try:
            contexto["abono"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "desde_cuando1"
            return "¬øA partir de qu√© periodo comenzar√°s a abonar esa cantidad extra? (Ejemplo: 4)"
        except:
            return "Por favor, un n√∫mero v√°lido (ej: 500)"

    if contexto.get("esperando") == "desde_cuando1":
        try:
            desde = int(mensaje.strip())
            total_sin, total_con, ahorro, pagos_menos = calcular_ahorro_por_abonos(
                contexto["monto"], contexto["tasa"],
                contexto["plazo"], contexto["abono"], desde
            )
            estado_usuario.pop(numero)
            return (
                f"üí∏ Si pagaras este cr√©dito sin hacer abonos extra, terminar√≠as pagando ${total_sin} en total.\n\n"
                f"Pero si decides abonar ${contexto['abono']} adicionales por periodo desde el periodo {desde}...\n"
                f"‚úÖ Terminar√≠as de pagar en menos tiempo (¬°te ahorras {pagos_menos} pagos!)\n"
                f"üí∞ Pagar√≠as ${total_con} en total\n"
                f"üßÆ Y te ahorrar√≠as ${ahorro} solo en intereses.\n\n"
                "Escribe *men√∫* para volver al inicio."
            )
        except:
            return "Ocurri√≥ un error al calcular el ahorro. Revisa tus datos."

    # Opci√≥n 3 (compras a pagos fijos) - Ajustado para periodos anuales
    if contexto.get("esperando") == "precio_contado":
        try:
            contexto["precio_contado"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "pago_fijo_tienda"
            return "2Ô∏è‚É£ ¬øDe cu√°nto ser√° cada pago (por ejemplo: 250)?"
        except:
            return "Por favor, indica el precio de contado con n√∫meros (ejemplo: 1800)"

    if contexto.get("esperando") == "pago_fijo_tienda":
        try:
            contexto["pago_fijo_tienda"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "numero_pagos_tienda"
            return "3Ô∏è‚É£ ¬øCu√°ntos pagos har√°s en total?"
        except:
            return "Cantidad inv√°lida. Intenta con un n√∫mero."

    if contexto.get("esperando") == "numero_pagos_tienda":
        try:
            # parse int robusto
            # si falla, mostrar√° el except
            numero_pagos = parsear_a_entero(mensaje)
            contexto["numero_pagos_tienda"] = numero_pagos
            contexto["esperando"] = "pedir_periodos_anuales_tienda"
            return (
                "Para calcular la tasa anual real, necesito saber "
                "cu√°ntos periodos hay en 1 a√±o. Ejemplo:\n"
                "12 si los pagos son mensuales\n"
                "24 si los pagos son quincenales\n"
                "52 si son semanales\n\n"
                "Dime cu√°ntos periodos hay en 1 a√±o (solo el n√∫mero):"
            )
        except:
            return "Ocurri√≥ un error. Indica cu√°ntos pagos totales har√°s (ejemplo: 24)."

    if contexto.get("esperando") == "pedir_periodos_anuales_tienda":
        try:
            periodos_anuales = parsear_a_entero(mensaje)
            total, intereses, tasa_periodo, tasa_anual = calcular_costo_credito_tienda(
                contexto["precio_contado"],
                contexto["pago_fijo_tienda"],
                contexto["numero_pagos_tienda"],
                periodos_anuales
            )
            # Al final limpiamos el estado
            estado_usuario.pop(numero)
            return (
                f"üìä Aqu√≠ tienes los resultados:\n"
                f"üí∞ Precio de contado: ${contexto['precio_contado']}\n"
                f"üìÜ Pagos fijos de ${contexto['pago_fijo_tienda']} durante {contexto['numero_pagos_tienda']} periodos.\n\n"
                f"üí∏ Total pagado: ${total}\n"
                f"üßÆ Intereses pagados: ${intereses}\n"
                f"üìà Tasa por periodo: {tasa_periodo}%\n"
                f"üìÖ Tasa anual equivalente (basado en {periodos_anuales} periodos al a√±o): {tasa_anual}%\n\n"
                "Escribe *men√∫* para volver al inicio."
            )
        except:
            return "Ocurri√≥ un error. Aseg√∫rate de indicar cu√°ntos periodos hay en un a√±o con un n√∫mero (ej: 24)."

    # Opci√≥n 4 (capacidad de pago)
    if contexto.get("esperando") == "ingreso":
        try:
            contexto["ingreso"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "pagos_fijos"
            return (
                "2Ô∏è‚É£ ¬øCu√°nto pagas mensualmente en cr√©ditos formales o instituciones financieras?\n"
                "(Es decir, en pagos de pr√©stamos personales, hipotecas, cr√©dito de auto, cr√©dito de n√≥mina, etc.)"
            )
        except:
            return "Por favor, escribe un n√∫mero v√°lido (ej: 12500)"

    if contexto.get("esperando") == "pagos_fijos":
        try:
            contexto["pagos_fijos"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "deuda_revolvente"
            return "3Ô∏è‚É£ ¬øCu√°nto debes actualmente en tarjetas de cr√©dito u otras deudas revolventes?"
        except:
            return "Por favor, indica la cantidad mensual que pagas en cr√©ditos (ej: 1800)"

    if contexto.get("esperando") == "deuda_revolvente":
        try:
            contexto["deuda_revolvente"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "riesgo"
            return (
                "4Ô∏è‚É£ Seg√∫n tu experiencia, ¬øc√≥mo calificar√≠as tu nivel de riesgo como cliente?\n"
                "1. Bajo (siempre pago a tiempo)\n"
                "2. Medio (a veces me atraso)\n"
                "3. Alto (me atraso seguido o ya tengo deudas grandes)"
            )
        except:
            return "Por favor, indica un n√∫mero para la deuda revolvente."

    if contexto.get("esperando") == "riesgo":
        if texto_limpio not in ["1", "2", "3"]:
            return "Elige 1, 2 o 3 seg√∫n tu nivel de riesgo."

        contexto["riesgo"] = texto_limpio
        porcentajes = {"1": Decimal("0.60"), "2": Decimal("0.45"), "3": Decimal("0.30")}
        porcentaje_riesgo = porcentajes[texto_limpio]
        ingreso = contexto["ingreso"]
        pagos_fijos = contexto["pagos_fijos"]
        deuda_revolvente = contexto["deuda_revolvente"]
        pago_est_deuda_revolvente = deuda_revolvente * Decimal("0.06")

        capacidad_total = ingreso * porcentaje_riesgo
        capacidad_mensual = capacidad_total - pagos_fijos - pago_est_deuda_revolvente
        capacidad_mensual = capacidad_mensual.quantize(Decimal("0.01"))

        contexto["capacidad_mensual"] = capacidad_mensual
        contexto["porcentaje_riesgo"] = porcentaje_riesgo
        contexto["esperando"] = "subopcion_prestamo"

        return (
            f"‚úÖ Seg√∫n tus datos, podr√≠as pagar hasta ${capacidad_mensual} al mes en un nuevo cr√©dito.\n\n"
            "¬øQu√© te gustar√≠a hacer ahora?\n"
            "1. Calcular el monto m√°ximo de cr√©dito que podr√≠as solicitar\n"
            "2. Validar si un cr√©dito que te interesa podr√≠a ser aprobado\n"
            "Escribe 1 o 2 para continuar."
        )

    if contexto.get("esperando") == "subopcion_prestamo":
        if texto_limpio == "1":
            contexto["esperando"] = "plazo_simular"
            return "üìÜ ¬øA cu√°ntos pagos (meses, quincenas, etc.) deseas simular el cr√©dito?"
        elif texto_limpio == "2":
            contexto["esperando"] = "monto_credito_deseado"
            return "üí∞ ¬øDe cu√°nto ser√≠a el cr√©dito que te interesa solicitar?"
        else:
            return "Por favor, escribe 1 o 2."

    if contexto.get("esperando") == "plazo_simular":
        try:
            contexto["plazo_simular"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "tasa_simular"
            return "üìà ¬øCu√°l es la tasa de inter√©s por periodo? (ej: 0.025 para 2.5%)"
        except:
            return "N√∫mero inv√°lido."

    if contexto.get("esperando") == "tasa_simular":
        try:
            tasa = Decimal(mensaje.replace(",", ""))
            plazo = contexto["plazo_simular"]
            capacidad = contexto["capacidad_mensual"]

            base = Decimal("1") + tasa
            potencia = base ** plazo
            inverso = Decimal("1") / potencia
            factor = (Decimal("1") - inverso) / tasa
            monto_maximo = (capacidad * factor).quantize(Decimal("0.01"))

            contexto["monto_maximo"] = monto_maximo
            contexto["esperando"] = "submenu_despues_de_maximo"
            return (
                f"‚úÖ Con base en tu capacidad de pago de ${capacidad}, podr√≠as aspirar a un cr√©dito de hasta ${monto_maximo}.\n\n"
                "¬øTe gustar√≠a ahora validar un cr√©dito espec√≠fico o volver al men√∫?\n"
                "1. Validar un cr√©dito\n"
                "2. Regresar al men√∫\n"
                "Escribe 1 o 2."
            )
        except:
            return "Verifica tu tasa (ejemplo: 0.025)."

    if contexto.get("esperando") == "submenu_despues_de_maximo":
        if texto_limpio == "1":
            contexto["esperando"] = "monto_credito_deseado"
            return "üí∞ ¬øDe cu√°nto ser√≠a el cr√©dito que te interesa solicitar?"
        elif texto_limpio == "2":
            estado_usuario.pop(numero)
            return "Listo, escribe *men√∫* para ver m√°s opciones."
        else:
            return "Por favor, escribe 1 o 2."

    if contexto.get("esperando") == "monto_credito_deseado":
        try:
            contexto["monto_deseado"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "plazo_deseado"
            return "üìÜ ¬øEn cu√°ntos pagos (meses, quincenas, etc.) planeas pagarlo?"
        except:
            return "Introduce un n√∫mero v√°lido."

    if contexto.get("esperando") == "plazo_deseado":
        try:
            contexto["plazo_deseado"] = Decimal(mensaje.replace(",", ""))
            contexto["esperando"] = "tasa_deseada"
            return "üìà ¬øCu√°l es la tasa de inter√©s por periodo? (ej: 0.025)"
        except:
            return "N√∫mero inv√°lido."

    if contexto.get("esperando") == "tasa_deseada":
        try:
            monto = contexto["monto_deseado"]
            plazo = contexto["plazo_deseado"]
            tasa = Decimal(mensaje.replace(",", ""))
            capacidad = contexto["capacidad_mensual"]
            porcentaje_riesgo = contexto["porcentaje_riesgo"]

            pago_estimado = calcular_pago_fijo_excel(monto, tasa, plazo)
            if pago_estimado <= capacidad:
                estado_usuario.pop(numero)
                return (
                    f"‚úÖ Puedes pagar este cr√©dito sin problemas.\n"
                    f"Tu pago mensual estimado es ${pago_estimado}, dentro de tu capacidad (${capacidad}).\n"
                    "Escribe *men√∫* para volver."
                )
            else:
                diferencia = (pago_estimado - capacidad).quantize(Decimal("0.01"))
                incremento_ingreso = (diferencia / porcentaje_riesgo).quantize(Decimal("0.01"))
                reduccion_revolvente = (diferencia / Decimal("0.06")).quantize(Decimal("0.01"))
                estado_usuario.pop(numero)
                return (
                    f"‚ùå No podr√≠as pagar este cr√©dito.\n"
                    f"Pago mensual: ${pago_estimado} > tu capacidad: ${capacidad}.\n\n"
                    "üîß Opciones:\n"
                    f"1. Reducir pagos fijos en al menos ${diferencia}.\n"
                    f"2. Aumentar ingresos en ~${incremento_ingreso}.\n"
                    f"3. Reducir deudas revolventes en ~${reduccion_revolvente}.\n\n"
                    "Escribe *men√∫* para volver."
                )
        except:
            return "Hubo un error. Revisa tus datos."

    # Submen√∫ Bur√≥
    if contexto.get("esperando") == "submenu_buro":
        if texto_limpio == "s√≠":
            estado_usuario.pop(numero)
            return (
                "¬øC√≥mo mejorar mi historial crediticio?\n"
                "Aqu√≠ tienes algunos consejos pr√°cticos para mejorar tu score en Bur√≥ de Cr√©dito y tener un historial m√°s saludable üìà\n"
                "________________________________________\n"
                "üîπ 1. Paga a tiempo, siempre\n"
                "üìå Aunque sea el pago m√≠nimo, evita atrasarte.\n"
                "‚úÖ La puntualidad pesa mucho en tu historial.\n"
                "________________________________________\n"
                "üîπ 2. Usa tus tarjetas con moderaci√≥n\n"
                "üìå Trata de no usar m√°s del 30%-40% del l√≠mite de tu tarjeta.\n"
                "‚úÖ Usarlas hasta el tope te resta puntos, aunque pagues.\n"
                "________________________________________\n"
                "üîπ 3. No abras muchos cr√©ditos al mismo tiempo\n"
                "üìå Si pides varios pr√©stamos en poco tiempo, parecer√° que est√°s desesperado/a por dinero.\n"
                "‚úÖ Ve uno a la vez y maneja bien el que tienes.\n"
                "________________________________________\n"
                "üîπ 4. Usa alg√∫n cr√©dito, aunque sea peque√±o\n"
                "üìå Si no tienes historial, nunca tendr√°s score.\n"
                "‚úÖ Una tarjeta departamental o un plan telef√≥nico pueden ser un buen inicio si los manejas bien.\n"
                "________________________________________\n"
                "üîπ 5. Revisa tu historial al menos una vez al a√±o\n"
                "üìå Puedes pedir un reporte gratuito en www.burodecredito.com.mx\n"
                "‚úÖ Aseg√∫rate de que no haya errores y de que tus datos est√©n correctos.\n"
                "Escribe *men√∫*."
            )
        else:
            estado_usuario.pop(numero)
            return "Entiendo. Escribe *men√∫*."

    return "No entend√≠. Escribe *men√∫* para ver las opciones."


@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    if request.method == "GET":
        verify_token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        if verify_token == "arrocito2024":
            return challenge
        return "Token inv√°lido", 403

    if request.method == "POST":
        data = request.get_json()
        try:
            mensaje = data['entry'][0]['changes'][0]['value']['messages'][0]['text']['body']
            numero = data['entry'][0]['changes'][0]['value']['messages'][0]['from']
        except:
            return "ok", 200

        respuesta = procesar_mensaje(mensaje, numero)
        enviar_mensaje(numero, respuesta)
        return "ok", 200

# if __name__ == "__main__":
#     app.run(debug=True)
