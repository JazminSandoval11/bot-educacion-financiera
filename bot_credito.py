# =========================================
# Bot de WhatsApp: Educaci√≥n Financiera para el Mundo
# Autora: Dra. Jazm√≠n Sandoval
# Descripci√≥n: Bot educativo para temas de cr√©dito
# =========================================

from flask import Flask, request
import json
from decimal import Decimal, getcontext
from math import log

# =========================================
# Configuraci√≥n general
# =========================================
app = Flask(__name__)
getcontext().prec = 17  # Precisi√≥n igual a Excel

# Diccionario global para seguimiento de estados de usuarios
estado_usuario = {}

# =========================================
# Funci√≥n: C√°lculo de pago fijo (tipo Excel)
# =========================================
def calcular_pago_fijo_excel(monto, tasa, plazo):
    """
    C√°lculo de pago fijo por periodo, equivalente a la funci√≥n de Excel.
    """
    P = Decimal(str(monto))
    r = Decimal(str(tasa))
    n = Decimal(str(plazo))
    uno_mas_r = Decimal('1') + r
    base_elevada = uno_mas_r ** n
    inverso = Decimal('1') / base_elevada
    denominador = Decimal('1') - inverso
    numerador = P * r
    pago = numerador / denominador
    return pago.quantize(Decimal('0.01'))

# =========================================
# C√°lculo del ahorro con abonos extra
# =========================================
def calcular_ahorro_por_abonos(monto, tasa, plazo, abono_extra, desde_periodo):
    P = Decimal(str(monto))
    r = Decimal(str(tasa))
    n = int(plazo)
    abono = Decimal(str(abono_extra))
    desde = int(desde_periodo)

    pago_fijo = calcular_pago_fijo_excel(P, r, n)
    saldo = P
    periodo = 1
    intereses_totales = Decimal('0.00')
    pagos_realizados = 0
    ultimo_pago = Decimal('0.00')
    total_con_abonos = Decimal('0.00')  # ‚úÖ Acumular aqu√≠

    while saldo > 0:
        interes = saldo * r
        abono_a_capital = pago_fijo - interes

        # Si ya toca aplicar el abono extra
        if periodo >= desde:
            abono_a_capital += abono
            total_pago_periodo = pago_fijo + abono
        else:
            total_pago_periodo = pago_fijo

        # Si el abono cubre todo el saldo, calculamos el √∫ltimo pago
        if abono_a_capital >= saldo:
            interes_final = saldo * r
            ultimo_pago = saldo + interes_final
            intereses_totales += interes_final
            total_con_abonos += ultimo_pago
            pagos_realizados += 1
            break

        saldo -= abono_a_capital
        intereses_totales += interes
        total_con_abonos += total_pago_periodo
        pagos_realizados += 1
        periodo += 1

    total_sin_abonos = pago_fijo * n
    ahorro_total = total_sin_abonos - total_con_abonos
    pagos_ahorrados = n - pagos_realizados

    return (
        total_sin_abonos.quantize(Decimal("0.01")),
        total_con_abonos.quantize(Decimal("0.01")),
        ahorro_total.quantize(Decimal("0.01")),
        pagos_ahorrados
    )

# =========================================
# C√°lculo del costo real de compras a pagos fijos en tiendas departamentales
# =========================================
def calcular_costo_credito_tienda(precio_contado, pago_periodico, num_pagos):
    """
    Aproxima la tasa de inter√©s si realizas pagos fijos por un producto
    y compara con el precio de contado.
    """
    precio = Decimal(str(precio_contado))
    cuota = Decimal(str(pago_periodico))
    n = int(num_pagos)

    saldo = precio
    r_estimada = Decimal('0.05')  # Valor inicial de iteraci√≥n
    for _ in range(100):
        try:
            base = (Decimal('1') + r_estimada) ** (-n)
            pago_calculado = saldo * r_estimada / (1 - base)
            diferencia = pago_calculado - cuota
            if abs(diferencia) < Decimal('0.0001'):
                break
            r_estimada -= diferencia / 1000
        except:
            break

    tasa_periodo = r_estimada
    total_pagado = cuota * n
    intereses = total_pagado - precio
    # Calcula tasa anual equivalente asumiendo 12 periodos
    tasa_anual = ((Decimal('1') + tasa_periodo) ** Decimal('12')) - Decimal('1')

    return (
        total_pagado.quantize(Decimal("0.01")),
        intereses.quantize(Decimal("0.01")),
        (tasa_periodo * 100).quantize(Decimal("0.01")),
        (tasa_anual * 100).quantize(Decimal("0.01"))
    )

# =========================================
# Saludo inicial con men√∫ principal
# =========================================
saludo_inicial = (
    "üëã Hola üòä, soy tu asistente virtual de Educaci√≥n Financiera para el Mundo, creado por la Dra. Jazm√≠n Sandoval.\n"
    "Estoy aqu√≠ para ayudarte a comprender mejor c√≥mo funcionan los cr√©ditos y tomar decisiones informadas üí≥üìä\n\n"
    "¬øSobre qu√© aspecto del cr√©dito necesitas ayuda hoy?\n"
    "Escr√≠beme el n√∫mero o el nombre de alguna de estas opciones para empezar:\n\n"
    "1Ô∏è‚É£ Simular un cr√©dito\n"
    "2Ô∏è‚É£ Ver cu√°nto ahorro si doy pagos extras a un cr√©dito\n"
    "3Ô∏è‚É£ Calcular el costo real de compras a pagos fijos en tiendas departamentales\n"
    "4Ô∏è‚É£ ¬øCu√°nto me pueden prestar?\n"
    "5Ô∏è‚É£ Consejos para pagar un cr√©dito sin ahogarte\n"
    "6Ô∏è‚É£ C√≥mo identificar un cr√©dito caro\n"
    "7Ô∏è‚É£ Errores comunes al solicitar un cr√©dito\n"
    "8Ô∏è‚É£ Entender el Bur√≥ de Cr√©dito"
)

# =========================================
# Funci√≥n para enviar el mensaje
# (La real conectar√≠a con la API de WhatsApp)
# =========================================
def enviar_mensaje(numero, texto):
    print(f"[Enviar a {numero}]: {texto}")

# =========================================
# Funci√≥n principal de l√≥gica de conversaci√≥n
# =========================================
def procesar_mensaje(mensaje, numero):
    texto_limpio = mensaje.strip().lower()

    # Men√∫ principal
    if texto_limpio in ["hola", "menu", "men√∫"]:
        estado_usuario[numero] = {}
        return saludo_inicial

    # Opci√≥n 1: Simular un cr√©dito (flujo original)
    if texto_limpio in ["1", "simular un cr√©dito"]:
        estado_usuario[numero] = {"esperando": "monto_credito"}
        return "Perfecto. Para comenzar, dime el monto del cr√©dito que deseas simular."

    # Opci√≥n 2: Ver cu√°nto me ahorro si doy pagos extra (directo, sin pasar por 1)
    if texto_limpio in ["2", "ver cu√°nto me ahorro si doy pagos extra al cr√©dito"]:
        # Creamos un estado separado para que pida
        # Monto, plazo, tasa y luego abono extra
        estado_usuario[numero] = {"esperando": "monto2"}
        return "Para estimar tu ahorro con pagos extra, primero dime el Monto del cr√©dito."

    # Opci√≥n 3: Calcular costo real de compras a pagos fijos
    if texto_limpio in ["3", "calcular el costo real de compras a pagos fijos en tiendas departamentales"]:
        estado_usuario[numero] = {"esperando": "precio_contado"}
        return (
            "Vamos a calcular el costo real de una compra a pagos fijos.\n"
            "Por favor dime lo siguiente:\n\n"
            "1Ô∏è‚É£ ¬øCu√°l es el precio de contado del producto?"
        )

    # Opci√≥n 4: ¬øCu√°nto me pueden prestar?
    if texto_limpio in ["4", "¬øcu√°nto me pueden prestar?"]:
        estado_usuario[numero] = {"esperando": "ingreso"}
        return (
            "Vamos a calcular cu√°nto podr√≠as solicitar como cr√©dito, seg√∫n tu capacidad de pago.\n\n"
            "Primero necesito saber:\n"
            "1Ô∏è‚É£ ¬øCu√°l es tu ingreso neto mensual? (Despu√©s de impuestos y deducciones)"
        )

    # Opci√≥n 5: Consejos para pagar un cr√©dito sin ahogarte
    if texto_limpio in ["5", "consejos para pagar un cr√©dito sin ahogarte"]:
        return (
            "üü° *Consejos para pagar un cr√©dito sin ahogarte*\n"
            "1) Haz pagos anticipados\n"
            "2) Programa pagos en autom√°tico\n"
            "3) Revisa si puedes cambiar tu cr√©dito\n"
            "4) Haz un presupuesto\n"
            "5) Prioriza deudas m√°s caras\n"
            "Escribe *men√∫* para volver."
        )

    # Opci√≥n 6: C√≥mo identificar un cr√©dito caro
    if texto_limpio in ["6", "c√≥mo identificar un cr√©dito caro"]:
        return (
            "üü° *C√≥mo identificar un cr√©dito caro*\n"
            "1) CAT elevado\n"
            "2) Comisiones escondidas\n"
            "3) Tasa variable\n"
            "4) Plazo largo con pagos bajos\n"
            "Si no entiendes el total a pagar, alerta.\n"
            "Escribe *men√∫* para volver."
        )

    # Opci√≥n 7: Errores comunes
    if texto_limpio in ["7", "errores comunes al solicitar un cr√©dito"]:
        return (
            "üü° *Errores comunes*\n"
            "1) No saber el total a pagar\n"
            "2) Pedir m√°s de lo necesario\n"
            "3) Aceptar el primer cr√©dito\n"
            "4) No leer contrato\n"
            "5) Usar cr√©dito sin plan\n"
            "Escribe *men√∫* para volver."
        )

    # Opci√≥n 8: Bur√≥ de Cr√©dito
    if texto_limpio in ["8", "entender el bur√≥ de cr√©dito"]:
        estado_usuario[numero] = {"esperando": "submenu_buro"}
        return (
            "üü° *Entender el Bur√≥ de Cr√©dito*\n"
            "No es una lista negra, sino un registro.\n"
            "¬øTe gustar√≠a saber c√≥mo mejorar tu historial?\n"
            "Responde *s√≠* o *no*."
        )

    # ============= L√ìGICA DE ESTADOS =============
    if numero in estado_usuario and "esperando" in estado_usuario[numero]:
        contexto = estado_usuario[numero]

        # ==== FLUJO 2: Directo a abonos extra ====
        if contexto["esperando"] == "monto2":
            try:
                contexto["monto"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "plazo2"
                return "¬øA cu√°ntos pagos (periodos) lo piensas pagar?"
            except:
                return "Por favor, indica el monto del cr√©dito como un n√∫mero."

        if contexto["esperando"] == "plazo2":
            try:
                contexto["plazo"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "tasa2"
                return "¬øCu√°l es la tasa de inter√©s en el mismo periodo en que har√°s los pagos? (ej. 0.025 para 2.5%)"
            except:
                return "Por favor, indica el plazo como un n√∫mero entero o decimal."

        if contexto["esperando"] == "tasa2":
            try:
                monto = contexto["monto"]
                plazo = contexto["plazo"]
                tasa = Decimal(mensaje.replace(",", ""))

                # Calculamos el pago fijo, guardamos en contexto
                pago = calcular_pago_fijo_excel(monto, tasa, plazo)
                total_pagado = pago * plazo
                intereses = total_pagado - monto

                contexto["tasa"] = tasa
                contexto["pago_fijo"] = pago
                contexto["esperando"] = "abono_extra2"

                return (
                    f"‚úÖ Tu pago por periodo ser√≠a de: ${pago}\n"
                    f"üí∞ Pagar√≠as en total: ${total_pagado.quantize(Decimal('0.01'))}\n"
                    f"üìâ De los cuales ${intereses.quantize(Decimal('0.01'))} ser√≠an intereses.\n\n"
                    "¬øCu√°nto deseas abonar extra por periodo? (Ejemplo: 500)"
                )
            except:
                return "Por favor escribe la tasa como un n√∫mero decimal (ej. 0.025)."

        if contexto["esperando"] == "abono_extra2":
            try:
                contexto["abono"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "desde2"
                return "¬øA partir de qu√© periodo comenzar√°s a abonar esa cantidad extra? (Ejemplo: 4)"
            except:
                return "Por favor, escribe solo la cantidad del abono extra (ejemplo: 500)"

        if contexto["esperando"] == "desde2":
            try:
                desde = int(mensaje.strip())
                total_sin, total_con, ahorro, pagos_menos = calcular_ahorro_por_abonos(
                    contexto["monto"],
                    contexto["tasa"],
                    contexto["plazo"],
                    contexto["abono"],
                    desde
                )
                estado_usuario.pop(numero)
                return (
                    f"üí∏ Si pagaras este cr√©dito sin hacer abonos extra, terminar√≠as pagando ${total_sin} en total.\n\n"
                    f"Pero si decides abonar ${contexto['abono']} adicionales por periodo desde el periodo {desde}...\n"
                    f"‚úÖ Terminar√≠as de pagar en menos tiempo (¬°te ahorras {pagos_menos} pagos!)\n"
                    f"üí∞ Pagar√≠as ${total_con} en total\n"
                    f"üßÆ Y te ahorrar√≠as ${ahorro} solo en intereses.\n\n"
                    "Escribe *men√∫* para volver al inicio."
                )
            except:
                return "Ocurri√≥ un error al calcular el ahorro. Revisa tus datos."

        # ==== FLUJO 1: Simulaci√≥n original (monto_credito, plazo_credito, etc.) ====
        if contexto["esperando"] == "monto_credito":
            try:
                contexto["monto"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "plazo_credito"
                return "¬øA cu√°ntos pagos (periodos) lo piensas pagar?"
            except:
                return "Por favor, indica el monto como un n√∫mero (ejemplo: 100000)"

        if contexto["esperando"] == "plazo_credito":
            try:
                contexto["plazo"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "tasa_credito"
                return (
                    "¬øCu√°l es la tasa de inter√©s en el mismo periodo en que har√°s los pagos?\n"
                    "Por ejemplo, si pagar√°s cada mes, la tasa debe ser mensual (0.025 para 2.5%)."
                )
            except:
                return "Por favor, indica el plazo como un n√∫mero."

        if contexto["esperando"] == "tasa_credito":
            try:
                monto = contexto["monto"]
                plazo = contexto["plazo"]
                tasa = Decimal(mensaje.replace(",", ""))
                pago = calcular_pago_fijo_excel(monto, tasa, plazo)
                total_pagado = pago * plazo
                intereses = total_pagado - monto
                contexto["tasa"] = tasa
                contexto["pago_fijo"] = pago
                contexto["esperando"] = "ver_si_abonos1"

                return (
                    f"‚úÖ Tu pago por periodo ser√≠a de: ${pago}\n"
                    f"üí∞ Pagar√≠as en total: ${total_pagado.quantize(Decimal('0.01'))}\n"
                    f"üìâ De los cuales ${intereses.quantize(Decimal('0.01'))} ser√≠an intereses.\n\n"
                    "¬øTe gustar√≠a ver cu√°nto podr√≠as ahorrar si haces pagos extra a capital?\n"
                    "Responde *s√≠* o *no*."
                )
            except:
                return "Por favor escribe la tasa como un n√∫mero decimal. Ejemplo: 0.025"

        if contexto["esperando"] == "ver_si_abonos1":
            if texto_limpio == "s√≠":
                contexto["esperando"] = "abono_extra1"
                return "¬øCu√°nto deseas abonar extra por periodo? (Ejemplo: 500)"
            elif texto_limpio == "no":
                estado_usuario.pop(numero)
                return "Ok, regresamos al inicio. Escribe *men√∫* si deseas ver otras opciones."
            else:
                return "Por favor, responde *s√≠* o *no*."

        if contexto["esperando"] == "abono_extra1":
            try:
                contexto["abono"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "desde_cuando1"
                return "¬øA partir de qu√© periodo comenzar√°s a abonar esa cantidad extra? (Ejemplo: 4)"
            except:
                return "Por favor, un n√∫mero v√°lido (ej: 500)"

        if contexto["esperando"] == "desde_cuando1":
            try:
                desde = int(mensaje.strip())
                total_sin, total_con, ahorro, pagos_menos = calcular_ahorro_por_abonos(
                    contexto["monto"],
                    contexto["tasa"],
                    contexto["plazo"],
                    contexto["abono"],
                    desde
                )
                estado_usuario.pop(numero)
                return (
                    f"üí∏ Si pagaras este cr√©dito sin hacer abonos extra, terminar√≠as pagando ${total_sin} en total.\n\n"
                    f"Pero si decides abonar ${contexto['abono']} adicionales por periodo desde el periodo {desde}...\n"
                    f"‚úÖ Terminar√≠as de pagar en menos tiempo (¬°te ahorras {pagos_menos} pagos!)\n"
                    f"üí∞ Pagar√≠as ${total_con} en total\n"
                    f"üßÆ Y te ahorrar√≠as ${ahorro} solo en intereses.\n\n"
                    "Escribe *men√∫* para volver al inicio."
                )
            except:
                return "Ocurri√≥ un error al calcular el ahorro. Revisa tus datos."

        # Opci√≥n 3: precio_contado, etc.
        if contexto["esperando"] == "precio_contado":
            try:
                contexto["precio_contado"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "pago_fijo_tienda"
                return "2Ô∏è‚É£ ¬øDe cu√°nto ser√° cada pago (por ejemplo: 250)?"
            except:
                return "Por favor, indica el precio de contado con n√∫meros (ejemplo: 1800)"

        if contexto["esperando"] == "pago_fijo_tienda":
            try:
                contexto["pago_fijo_tienda"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "numero_pagos_tienda"
                return "3Ô∏è‚É£ ¬øCu√°ntos pagos har√°s en total?"
            except:
                return "Cantidad inv√°lida. Intenta con un n√∫mero."

        if contexto["esperando"] == "numero_pagos_tienda":
            try:
                num_pagos = int(mensaje.strip())
                total, intereses, tasa_periodo, tasa_anual = calcular_costo_credito_tienda(
                    contexto["precio_contado"],
                    contexto["pago_fijo_tienda"],
                    num_pagos
                )
                estado_usuario.pop(numero)
                return (
                    f"üìä Aqu√≠ tienes los resultados:\n"
                    f"üí∞ Precio de contado: ${contexto['precio_contado']}\n"
                    f"üìÜ Pagos fijos de ${contexto['pago_fijo_tienda']} durante {num_pagos} periodos.\n\n"
                    f"üí∏ Total pagado: ${total}\n"
                    f"üßÆ Intereses pagados: ${intereses}\n"
                    f"üìà Tasa por periodo: {tasa_periodo}%\n"
                    f"üìÖ Tasa anual equivalente: {tasa_anual}%\n\n"
                    "Escribe *men√∫* para volver al inicio."
                )
            except:
                return "Ocurri√≥ un error al calcular el cr√©dito. Revisa tus datos."

        # Opci√≥n 4: Ingreso, pagos_fijos, ...
        if contexto["esperando"] == "ingreso":
            try:
                contexto["ingreso"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "pagos_fijos"
                return (
                    "2Ô∏è‚É£ ¬øCu√°nto pagas mensualmente en cr√©ditos formales o instituciones financieras?\n"
                    "(No incluyas comida, renta, etc.)"
                )
            except:
                return "Por favor, escribe un n√∫mero v√°lido (ej: 12500)"

        if contexto["esperando"] == "pagos_fijos":
            try:
                contexto["pagos_fijos"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "deuda_revolvente"
                return "3Ô∏è‚É£ ¬øCu√°nto debes actualmente en tarjetas de cr√©dito u otras deudas revolventes?"
            except:
                return "Por favor, indica la cantidad mensual que pagas en cr√©ditos (ej: 1800)"

        if contexto["esperando"] == "deuda_revolvente":
            try:
                contexto["deuda_revolvente"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "riesgo"
                return (
                    "4Ô∏è‚É£ Seg√∫n tu experiencia, ¬øc√≥mo calificar√≠as tu nivel de riesgo como cliente?\n"
                    "1. Bajo (siempre pago a tiempo)\n"
                    "2. Medio (a veces me atraso)\n"
                    "3. Alto (me atraso seguido o ya tengo deudas grandes)"
                )
            except:
                return "Por favor, indica un n√∫mero para la deuda revolvente."

        if contexto["esperando"] == "riesgo":
            riesgo = texto_limpio
            if riesgo not in ["1", "2", "3"]:
                return "Elige 1, 2 o 3 seg√∫n tu nivel de riesgo."

            contexto["riesgo"] = riesgo
            porcentaje_riesgo = {"1": Decimal("0.60"), "2": Decimal("0.45"), "3": Decimal("0.30")}[riesgo]
            ingreso = contexto["ingreso"]
            pagos_fijos = contexto["pagos_fijos"]
            deuda_revolvente = contexto["deuda_revolvente"]
            pago_est_deuda_revolvente = deuda_revolvente * Decimal("0.06")

            capacidad_total = ingreso * porcentaje_riesgo
            capacidad_mensual = capacidad_total - pagos_fijos - pago_est_deuda_revolvente
            capacidad_mensual = capacidad_mensual.quantize(Decimal("0.01"))

            contexto["capacidad_mensual"] = capacidad_mensual
            contexto["porcentaje_riesgo"] = porcentaje_riesgo
            contexto["esperando"] = "subopcion_prestamo"

            return (
                f"‚úÖ Seg√∫n tus datos, podr√≠as pagar hasta ${capacidad_mensual} al mes en un nuevo cr√©dito.\n\n"
                "¬øQu√© te gustar√≠a hacer ahora?\n"
                "1. Calcular el monto m√°ximo de cr√©dito que podr√≠as solicitar\n"
                "2. Validar si un cr√©dito que te interesa podr√≠a ser aprobado\n"
                "Escribe 1 o 2 para continuar."
            )

        if contexto["esperando"] == "subopcion_prestamo":
            opcion = texto_limpio
            if opcion == "1":
                contexto["esperando"] = "plazo_simular"
                return "üìÜ ¬øA cu√°ntos pagos (meses, quincenas, etc.) deseas simular el cr√©dito?"
            elif opcion == "2":
                contexto["esperando"] = "monto_credito_deseado"
                return "üí∞ ¬øDe cu√°nto ser√≠a el cr√©dito que te interesa solicitar?"
            else:
                return "Por favor, escribe 1 o 2."

        if contexto["esperando"] == "plazo_simular":
            try:
                contexto["plazo_simular"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "tasa_simular"
                return "üìà ¬øCu√°l es la tasa de inter√©s por periodo? (ej: 0.025 para 2.5%)"
            except:
                return "N√∫mero inv√°lido."

        if contexto["esperando"] == "tasa_simular":
            try:
                tasa = Decimal(mensaje.replace(",", ""))
                plazo = contexto["plazo_simular"]
                capacidad = contexto["capacidad_mensual"]
                base = Decimal("1") + tasa
                potencia = base ** plazo
                inverso = Decimal("1") / potencia
                factor = (Decimal("1") - inverso) / tasa
                monto_maximo = (capacidad * factor).quantize(Decimal("0.01"))
                estado_usuario.pop(numero)

                return (
                    f"‚úÖ Con base en tu capacidad de pago de ${capacidad}, podr√≠as aspirar a un cr√©dito de hasta ${monto_maximo}.\n\n"
                    "Escribe *men√∫* para volver."
                )
            except:
                return "Verifica tu tasa (ejemplo: 0.025)."

        if contexto["esperando"] == "monto_credito_deseado":
            try:
                contexto["monto_deseado"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "plazo_deseado"
                return "üìÜ ¬øEn cu√°ntos pagos (meses, quincenas, etc.) planeas pagarlo?"
            except:
                return "Introduce un n√∫mero v√°lido."

        if contexto["esperando"] == "plazo_deseado":
            try:
                contexto["plazo_deseado"] = Decimal(mensaje.replace(",", ""))
                contexto["esperando"] = "tasa_deseada"
                return "üìà ¬øCu√°l es la tasa de inter√©s por periodo? (ej: 0.025)"
            except:
                return "N√∫mero inv√°lido."

        if contexto["esperando"] == "tasa_deseada":
            try:
                monto = contexto["monto_deseado"]
                plazo = contexto["plazo_deseado"]
                tasa = Decimal(mensaje.replace(",", ""))
                capacidad = contexto["capacidad_mensual"]
                porcentaje_riesgo = contexto["porcentaje_riesgo"]

                pago_estimado = calcular_pago_fijo_excel(monto, tasa, plazo)
                if pago_estimado <= capacidad:
                    estado_usuario.pop(numero)
                    return (
                        f"‚úÖ Puedes pagar este cr√©dito sin problemas.\n"
                        f"Tu pago mensual estimado es ${pago_estimado}, dentro de tu capacidad (${capacidad}).\n"
                        "Escribe *men√∫* para volver."
                    )
                else:
                    diferencia = (pago_estimado - capacidad).quantize(Decimal("0.01"))
                    incremento_ingreso = (diferencia / porcentaje_riesgo).quantize(Decimal("0.01"))
                    reduccion_revolvente = (diferencia / Decimal("0.06")).quantize(Decimal("0.01"))
                    estado_usuario.pop(numero)
                    return (
                        f"‚ùå No podr√≠as pagar este cr√©dito.\n"
                        f"Pago mensual: ${pago_estimado} > tu capacidad: ${capacidad}.\n\n"
                        "üîß Opciones:\n"
                        f"1. Reducir pagos fijos en al menos ${diferencia}.\n"
                        f"2. Aumentar ingresos en ~${incremento_ingreso}.\n"
                        f"3. Reducir deudas revolventes en ~${reduccion_revolvente}.\n\n"
                        "Escribe *men√∫* para volver."
                    )
            except:
                return "Hubo un error. Revisa tus datos."

        # Submen√∫ del Bur√≥ de Cr√©dito
        if contexto["esperando"] == "submenu_buro":
            if texto_limpio == "s√≠":
                estado_usuario.pop(numero)
                return (
                    "üìÇ *C√≥mo mejorar tu historial crediticio*\n"
                    "1. Paga a tiempo (aunque sea m√≠nimo)\n"
                    "2. Usa tarjetas con moderaci√≥n (30-40% del l√≠mite)\n"
                    "3. No abras muchos cr√©ditos juntos\n"
                    "4. Usa alg√∫n cr√©dito, aunque sea peque√±o\n"
                    "5. Revisa tu historial al menos 1 vez al a√±o (www.burodecredito.com.mx)\n\n"
                    "Escribe *men√∫*."
                )
            else:
                estado_usuario.pop(numero)
                return "Entiendo. Escribe *men√∫*."

    # Si nada aplica, men√∫ por default:
    return "No entend√≠. Escribe *men√∫* para ver las opciones."

# =========================================
# Webhook de Flask para la API
# =========================================
@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    if request.method == "GET":
        verify_token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        if verify_token == "arrocito2024":
            return challenge
        return "Token inv√°lido", 403

    if request.method == "POST":
        data = request.get_json()
        try:
            mensaje = data['entry'][0]['changes'][0]['value']['messages'][0]['text']['body']
            numero = data['entry'][0]['changes'][0]['value']['messages'][0]['from']
        except:
            return "ok", 200

        respuesta = procesar_mensaje(mensaje, numero)
        enviar_mensaje(numero, respuesta)
        return "ok", 200

# if __name__ == "__main__":
#     app.run(debug=True)
